apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  annotations:
  labels:
    k8s-app: common-adapter-${HOSTNAME}
    io.kompose.service: common-adapter-${HOSTNAME}
  name: common-adapter
  namespace: ${KUBENS}
spec:
  selector:
    matchLabels:
      app: common-adapter-${HOSTNAME}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
      labels:
#        io.kompose.network/kubefile_gsmawr_msp: "true"
        io.kompose.service: common-adapter-${HOSTNAME}
        app: common-adapter-${HOSTNAME}
    spec:
      initContainers:
      - name: initdb
        image: ${IMAGE_ALPINE}
        imagePullPolicy: IfNotPresent
        envFrom:
          - configMapRef:
              name: proxy-environment-variables
        env:
        - name: INIT
          value: "db.createUser({user: \"${COMMON_ADAPTER_MONGO_USER}\",pwd: \"${COMMON_ADAPTER_MONGO_USERPW}\",roles: [{role: \"readWrite\",db: \"commondb\"}]}); db.contracts.createIndex({id: 1}, {unique: true}); db.contracts.createIndex({referenceId: 1}, {unique: true, partialFilterExpression: {referenceId: {$type: \"string\"}}});"
        command: [ "sh" ]
        args: [ "-c", "echo $INIT > /docker-entrypoint-initdb.d/mongo-init.js" ]
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d/
          name: data-pvc
          subPath: peer/cadb/init/

      containers:
      - name: cadb
        image: ${IMAGE_MONGO}
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: '${COMMON_ADAPTER_MONGO_ROOT}'
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: '${COMMON_ADAPTER_MONGO_ROOTPW}'
        - name: MONGO_INITDB_DATABASE
          value: 'commondb'
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: data-pvc
          subPath: peer/cadb/
        - mountPath: /docker-entrypoint-initdb.d/
          name: data-pvc
          subPath: peer/cadb/init/

      - name: common-adapter
        image: ${IMAGE_COMMON_ADAPTER}
        imagePullPolicy: IfNotPresent
        env:
        - name: COMMON_ADAPTER_LOG_LEVEL
          value: 'info'
        - name: COMMON_ADAPTER_DB_URL
          value: 'mongodb://${COMMON_ADAPTER_MONGO_USER}:${COMMON_ADAPTER_MONGO_USERPW}@common-adapter-db-${HOSTNAME}.${KUBENS}.svc.cluster.local:${COMMON_ADAPTER_MONGO_PORT}/commondb?authSource=commondb'
        - name: COMMON_ADAPTER_BLOCKCHAIN_ADAPTER_URL
          value: 'http://blockchain-adapter-${HOSTNAME}.${KUBENS}.svc.cluster.local:${BLOCKCHAIN_ADAPTER_PORT}'
        - name: COMMON_ADAPTER_SELF_HOST
          value: 'http://common-adapter-${HOSTNAME}.${KUBENS}.svc.cluster.local:${COMMON_ADAPTER_PORT}'
        - name: COMMON_ADAPTER_BLOCKCHAIN_ADAPTER_WEBHOOK_EVENTS
          value: '["STORE:PAYLOADLINK", "STORE:SIGNATURE"]'
        - name: COMMON_ADAPTER_CALCULATION_SERVICE_URL
          value: 'http://calculator-${HOSTNAME}.${KUBENS}.svc.cluster.local:${CALCULATOR_PORT}'
        - name: COMMON_ADAPTER_DISCREPANCY_SERVICE_URL
          value: 'http://discrepancy-${HOSTNAME}.${KUBENS}.svc.cluster.local:${DISCREPANCY_SERVICE_PORT}'
        ports:
        - containerPort: 3000
          protocol: TCP
      imagePullSecrets:
      - name: nomad-secret
      hostname: common-adapter-${HOSTNAME}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: data-pvc
        persistentVolumeClaim:
          claimName: data-claim
